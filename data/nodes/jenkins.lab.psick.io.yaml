---
# We need jenkins class in base classes to avoid dependency loops
psick::pre::linux_classes:
  rubybuild: psick::ruby::buildgems
psick::base::linux_classes:
  jenkins: psick::jenkins
  docker: psick::docker
  jenkins_jcasc: psick::jenkins::jcasc
psick::profiles::linux_classes:
  jenkins: ''
  pdk: psick::puppet::pdk
  vagrant: psick::vagrant
  git: psick::git
  puppet_pdk: psick::puppet::pdk
  puppet_ci: psick::puppet::ci

#:noop_mode: true
tp_profile::postfix::no_noop: true

psick::vagrant::default_plugins:
  - vagrant-cachier
  - vagrant-vbguest
psick::docker::allowed_users:
  - jenkins

# Enabled and configure scm-sync plugin
# psick::jenkins::scm_sync_repository_url: git@github.com:alvagante/jenkins.lab.psick.io-scmsync.git
# psick::jenkins::scm_sync_repository_host: github.com
psick::jenkins::disable_setup_wizard: true

# SSH keys for jenkins to access (read & write) to the scm_sync_repository_url
#Â Set ssh_keys_generate to true to automatically generate a new ssh keypair
# to manually add on the used git server.
psick::jenkins::ssh_keys_generate: false

# Pregenerated keypairs files can be provided via content or source arguments.
# Private key should be secret: to source from a secure path
# or specify content and then encrypt it ith hiera eyaml
# psick::jenkins::ssh_private_key_content: ENC[...]
# Here to automate sample setup we ship keys as files in the same hieradata module

# This can be done either with something like:  
apsick::jenkins::ssh_private_key_source: puppet:///modules/hieradata/jenkins/id_rsa-jenkins.lab.psick.io
apsick::jenkins::ssh_public_key_source: puppet:///modules/hieradata/jenkins/id_rsa.pub-jenkins.lab.psick.io

# Or with a more generic and flexible approach via the psick::openssh profile: 
apsick::openssh::keypairs_hash:
  jenkins:
    public_key_source: 'puppet:///modules/hieradata/jenkins/id_rsa.pub-jenkins.lab.psick.io'
    private_key_source: 'puppet:///modules/hieradata/jenkins/id_rsa-jenkins.lab.psick.io'
    dir_path: /var/lib/jenkins/.ssh

# Plugins installation.
# Check psick/manifests/jenkins/plugin.pp for parameters
apsick::jenkins::plugins:
  workflow-aggregator:
    enable: true
  msbuild:
    enable: true
  github:
    enable: true
  warnings:
    enable: true
  ec2:
    enable: true
  blueocean:
    enable: false

# Install gems needed for Ci tests only in Puppet environment.
# Use a default set of gems for integration tests
# Note: They include beaker, with a lot of dependencies.  
psick::puppet::gems::default_set: integration
psick::puppet::gems::install_puppet_gems: true
psick::puppet::gems::install_system_gems: false
psick::puppet::gems::install_chruby_gems: false

# This forces overwrites of puppet and facter binaries (from package)
# installing the relevant gems.
# Needed for gems that depend on them
# (TODO: find a better solution)
psick::puppet::gems::install_options:
  - --force

psick::bolt::is_master: true
psick::bolt::bolt_user: jenkins
psick::bolt::master::generate_nodes_list: false
psick::bolt::master::run_ssh_keygen: false
psick::bolt::master::user_home: /var/lib/jenkins

# CI management: nodes to test
psick::puppet::ci::default_nodes:
  - puppet.lab.psick.io
  - git.lab.psick.io
psick::puppet::ci::always_nodes:
  - lamp.lab.psick.io
psick::puppet::ci::options:
  catalog_preview_default_nodes:
    - lamp.lab.psick.io
    - puppet.lab.psick.io

psick::openssh::configs_hash:
  jenkins:
    path: /var/lib/jenkins/.ssh/config
    create_ssh_dir: true
    options_hash:
      Host puppet.lab.psick.io:
        StrictHostKeyChecking: no
        UserKnownHostsFile: /dev/null
      Host puppet:
        StrictHostKeyChecking: no
        UserKnownHostsFile: /dev/null
      Host github.com:
        StrictHostKeyChecking: no
        UserKnownHostsFile: /dev/null

# Pork around for sudo al on Ubuntu
tp_profile::postfix::manage: false
psick::users::users_hash:
  al:
    groups:
      - admin
      - --wheel

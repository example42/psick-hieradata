---
# We need jenkins class in base classes to avoid dependency loops
# Other classes are needed to test Puppet code
psick::pre::linux_classes:
  rubybuild: psick::ruby::buildgems
psick::base::linux_classes:
  jenkins: psick::jenkins
  jenkins_jcasc: psick::jenkins::jcasc
  docker: psick::docker
  pdk: psick::puppet::pdk
  vagrant: psick::vagrant
#  git: psick::git
  puppet_pdk: psick::puppet::pdk
  puppet_ci: psick::puppet::ci

psick::vagrant::default_plugins:
  - vagrant-cachier
  - vagrant-vbguest
psick::docker::allowed_users:
  - jenkins

# Enable and configure scm-sync plugin
DISABLEDpsick::jenkins::scm_sync_repository_url: git@github.com:alvagante/jenkins.foss.psick.io-scmsync.git
# Run psick::openssk::keyscan github.com before cloning
psick::jenkins::scm_sync_repository_host: github.com

# Disable initial setup wizard and set admin password (hiera-encrypt on real servers)
psick::jenkins::disable_setup_wizard: true
psick::jenkins::admin_password: 'example42'

# SSH keys for jenkins to access (read & write) to the scm_sync_repository_url
# Set ssh_keys_generate to true to automatically generate a new ssh keypair
# to manually add on the used git server.
psick::jenkins::ssh_keys_generate: false

# Pregenerated keypairs files can be provided via content or source arguments.
# Private key should be secret: to source from a secure path
# or specify content and then encrypt it ith hiera eyaml
# psick::jenkins::ssh_private_key_content: ENC[...]
# Here to automate sample setup we ship keys as files in the same hieradata module
# psick::jenkins::ssh_private_key_source: puppet:///modules/hieradata/jenkins/id_rsa-jenkins.foss.psick.io
# psick::jenkins::ssh_public_key_source: puppet:///modules/hieradata/jenkins/id_rsa.pub-jenkins.foss.psick.io
psick::openssh::keypairs_hash:
  jenkins:
    public_key_source: 'puppet:///modules/hieradata/jenkins/id_rsa.pub-jenkins.foss.psick.io'
    private_key_source: 'puppet:///modules/hieradata/jenkins/id_rsa-jenkins.foss.psick.io'
    dir_path: /var/lib/jenkins/.ssh

# Plugins installation.
# Check psick/manifests/jenkins/plugin.pp for parameters
psick::jenkins::plugins:
  workflow-aggregator:
    enable: true
  msbuild:
    enable: true
  github:
    enable: true
  warnings:
    enable: true
  ec2:
    enable: true
  blueocean:
    enable: true

# Jenkins configuration as code pluugin template and options
#psick::jenkins::jcasc::config_template: 'profile/jenkins/jcasc/jenkins.yaml.erb'
#  psick::jenkins::jcasc::options_hash:
#    privateKey: 'crypted_data'

# Install gems needed for Ci tests only in Puppet environment.
# Use a default set of gems for integration tests
# Note: They include beaker, with a lot of dependencies.  
psick::puppet::gems::default_set: integration
psick::puppet::gems::install_puppet_gems: false
psick::puppet::gems::install_system_gems: false
psick::puppet::gems::install_rbenv_gems: false

# This forces overwrites of puppet and facter binaries (from package)
# installing the relevant gems.
# Needed for gems that depend on them
# (TODO: find a better solution)
psick::puppet::gems::install_options:
  - --force

psick::bolt::is_master: true
psick::bolt::bolt_user: jenkins
psick::bolt::master::generate_nodes_list: false
psick::bolt::master::run_ssh_keygen: false
psick::bolt::master::user_home: /var/lib/jenkins

# CI management: nodes to test
psick::puppet::ci::default_nodes:
  - puppet.foss.psick.io
  - git.foss.psick.io
psick::puppet::ci::always_nodes:
  - lamp.foss.psick.io
psick::puppet::ci::options:
  catalog_preview_default_nodes:
    - lamp.foss.psick.io
    - puppet.foss.psick.io

# Not necessary when psick::openssh::keyscan is used 
DISABLEpsick::openssh::configs_hash:
  jenkins:
    path: /var/lib/jenkins/.ssh/config
    create_ssh_dir: false
    options_hash:
      Host puppet.foss.psick.io:
        StrictHostKeyChecking: no
        UserKnownHostsFile: /dev/null
      Host puppet:
        StrictHostKeyChecking: no
        UserKnownHostsFile: /dev/null
      Host github.com:
        StrictHostKeyChecking: no
        UserKnownHostsFile: /dev/null

